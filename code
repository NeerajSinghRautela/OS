#include <bits/stdc++.h> 
 using namespace std;
   int check(string s, string w) 
   {   for (char c : s)
    {     if (w.find(c) != string::npos) 
    {       return 0;  
       }   } 
         return 1; 
         }  int main()
          {   int n;   cin >> n; 
            string s; 
              cin >> s; 
                string numbers = "0123456789";  
                 string lower_case = "abcdefghijklmnopqrstuvwxyz"; 
                   string upper_case = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; 
                     string special_characters = "!@#$%^&*()-+";  
                      int ans = 0;   
                      ans += check(s, numbers);
                         ans += check(s, lower_case); 
                           ans += check(s, upper_case); 
                             ans += check(s, special_characters); 
                               ans = max(ans, 6 - n); 
                                 printf("%d\n", ans);  
                                  return 0; }


Next

/ C++ implementation of the approach
#include<iostream>
using namespace std;

// Function to return the maximum
// water that can be stored
int maxWater(int arr[], int n)
{
	
	// To store the maximum water
	// that can be stored
	int res = 0;
	
	// For every element of the array
	for (int i = 1; i < n-1; i++) {
		
		// Find the maximum element on its left
		int left = arr[i]/2;
		for (int j=0; j<i; j++)
		left = max(left, arr[j]);
		
		// Find the maximum element on its right
		int right = arr[i]/2;
		for (int j=i+1; j<n; j++)
		right = max(right, arr[j]);
		
	// Update the maximum water
	res = res + (min(left, right) - arr[i]);
	}

	return res;
}

// Driver code
int main()
{
	
	int n;
cin>>n;
	int arr[n];
for(int i=0;i<n;i++)
scanf("%d",&arr[i]);

	cout << maxWater(arr, n)*(-1);
	
	return 0;
}
#include<bits/stdc++.h>
using namespace std;
 
long maxWater(long height[], int n)
{
    long maximum = 0;

    // Check all possible pairs of buildings
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            long current = (min(height[i],
                               height[j])
                           * (j - i - 1));
 
            // Maximum so far
            maximum = max(maximum, current);
        }
    }
    return maximum;
}

int main()
{
    int t;
    cin>>t;

    while(t-- > 0)
    {
        int n;
        cin>>n;
        long arr[n];
        for(int i=0; i<n; i++) cin>>arr[i];

        cout<<maxWater(arr,n)<<endl;
    }

    return 0;
}
